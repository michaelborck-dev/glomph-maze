name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CC: gcc
  CFLAGS: -Wall -Wextra -O2

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            curses: ncurses
          - os: macos-latest
            curses: ncurses
          - os: windows-latest
            curses: pdcurses  # Use PDCurses for Windows

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses5-dev clang-format-16 clang-tidy-16 cppcheck

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ncurses clang-format cppcheck

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-clang
          mingw-w64-x86_64-pdcurses
          mingw-w64-x86_64-clang-tools-extra
          mingw-w64-x86_64-cppcheck
      shell: msys2 {0}

    - name: Check formatting
      run: |
        find src/ inc/ -name '*.c' -o -name '*.h' | xargs clang-format-16 --dry-run --Werror

    - name: Lint with clang-tidy
      run: |
        find src/ inc/ -name '*.c' -o -name '*.h' | xargs clang-tidy-16 --fix --quiet

    - name: Static analysis with cppcheck
      run: cppcheck --enable=all --inconclusive --suppress=missingInclude src/ inc/

    - name: Build
      run: make clean all

    - name: Test
      run: |
        # Basic smoke test
        ./glomph-maze --help
        # Add more tests if available

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changelog
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
